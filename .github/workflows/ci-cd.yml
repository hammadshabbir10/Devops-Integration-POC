name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  K8S_NAMESPACE: microservices
  APP_VERSION: ${{ github.sha }}

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest  # Only if you need pytest
        
    - name: Verify installation
      run: |
        pip show Flask mysqlclient requests python-dotenv || exit 1
        echo "✓ All dependencies installed"

    - name: Test imports
      run: |
        python -c "
        try:
            import flask
            from microservices.services import bookings, movies, showtimes, user
            from microservices.database import db_connection
            print('✓ All modules import successfully')
        except ImportError as e:
            print(f'✗ Import failed: {str(e)}')
            exit(1)
        "

  build-and-push:
    needs: setup-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [booking-service, movie-service, showtime-service, user-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    
    - name: Build and push
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }} \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest \
          --build-arg SERVICE_MODULE=${{ matrix.service }} \
          .
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }}
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest

  deploy:
      needs: build-and-push
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      
      - name: Set up Minikube
        run: |
          # Install with more resources and storage addons
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          sudo apt-get update
          sudo apt-get install -y kubectl
          minikube start --driver=docker --cpus=4 --memory=8g --disk-size=20g
          minikube addons enable storage-provisioner
          minikube addons enable default-storageclass
          minikube update-context
          kubectl cluster-info

      - name: Deploy Resources
        run: |
          # Create namespace
          kubectl create namespace movie-booking --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply configurations
          kubectl apply -f k8s_specification/configmaps/ -n movie-booking
          kubectl apply -f k8s_specification/secrets/ -n movie-booking
          kubectl apply -f k8s_specification/persistentvolume/ -n movie-booking
          
          # Wait for PVC to be bound
          echo "Waiting for PVC to bind..."
          kubectl wait --for=status=Bound pvc/mysql-pvc -n movie-booking --timeout=120s
          
          # Deploy MySQL with proper waiting
          kubectl apply -f k8s_specification/deployments/mysql-deployment.yaml -n movie-booking
          
          # Wait for MySQL with debugging
          echo "Waiting for MySQL to start..."
          end=$((SECONDS+300))
          while [ $SECONDS -lt $end ]; do
            PHASE=$(kubectl get pod -l app=mysql -n movie-booking -o jsonpath='{.items[0].status.phase}')
            [ "$PHASE" = "Running" ] && break
            echo "MySQL status: $PHASE"
            sleep 5
          done
          
          # Check MySQL logs if not running
          if ! kubectl get pod -l app=mysql -n movie-booking -o jsonpath='{.items[0].status.phase}' | grep -q Running; then
            echo "MySQL failed to start. Logs:"
            kubectl logs -l app=mysql -n movie-booking --tail=50
            exit 1
          fi
          
          # Wait for MySQL to be actually ready
          kubectl wait --for=condition=ready pod -l app=mysql -n movie-booking --timeout=300s
          
          # Deploy other services
          for service in booking-service movie-service showtime-service user-service; do
            echo "Deploying $service..."
            kubectl apply -f k8s_specification/deployments/$service-deployment.yaml -n movie-booking
            sleep 15
          done
          
          # Update images
          for service in booking-service movie-service showtime-service user-service; do
            kubectl set image deployment/$service \
              $service=${{ env.DOCKER_REGISTRY }}/22i1140/$service:${{ env.APP_VERSION }} \
              -n movie-booking
          done
          
          # Apply services and ingress
          kubectl apply -f k8s_specification/services/ -n movie-booking
          kubectl apply -f k8s_specification/ingress/ -n movie-booking
          
          # Final checks
          echo "Final status:"
          kubectl get pods -n movie-booking -o wide
          kubectl get events -n movie-booking --sort-by='.lastTimestamp'