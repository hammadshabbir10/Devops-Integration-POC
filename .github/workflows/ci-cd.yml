name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  K8S_NAMESPACE: microservices
  APP_VERSION: ${{ github.sha }}

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install package with dependencies
      run: |
        # Install in development mode to include all dependencies
        pip install -e .
        
        # Verify installation
        pip list | grep Flask
        pip list | grep mysqlclient

  test-services:
    needs: setup-environment
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify imports
      run: |
        echo "Testing critical imports..."
        python -c "
        from microservices.services import bookings, movies, showtimes, user;
        from microservices.database import db_connection;
        print('âœ“ All modules import successfully')
        "
        echo "Import verification passed!"

  build-and-push:
    needs: test-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [booking-service, movie-service, showtime-service, user-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    
    - name: Build and push
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }} \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest \
          --build-arg SERVICE_MODULE=${{ matrix.service }} \
          .
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }}
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: azure/setup-kubectl@v3
    
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s_specification/configmaps/ -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s_specification/secrets/ -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s_specification/persistentvolume/ -n ${{ env.K8S_NAMESPACE }}
        
        # Update deployments
        for service in booking-service movie-service showtime-service user-service; do
          kubectl set image deployment/$service $service=${{ env.DOCKER_REGISTRY }}/22i1140/$service:${{ env.APP_VERSION }} -n ${{ env.K8S_NAMESPACE }}
        done
        
        kubectl apply -f k8s_specification/services/ -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f k8s_specification/ingress/ -n ${{ env.K8S_NAMESPACE }}
        
        # Verify deployments
        kubectl rollout status -n ${{ env.K8S_NAMESPACE }} deployment/movie-service --timeout=300s
        kubectl rollout status -n ${{ env.K8S_NAMESPACE }} deployment/booking-service --timeout=300s
        kubectl rollout status -n ${{ env.K8S_NAMESPACE }} deployment/showtime-service --timeout=300s
        kubectl rollout status -n ${{ env.K8S_NAMESPACE }} deployment/user-service --timeout=300s