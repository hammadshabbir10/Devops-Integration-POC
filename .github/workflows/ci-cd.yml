name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  K8S_NAMESPACE: microservices
  APP_VERSION: ${{ github.sha }}

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest  # Only if you need pytest
        
    - name: Verify installation
      run: |
        pip show Flask mysqlclient requests python-dotenv || exit 1
        echo "✓ All dependencies installed"

    - name: Test imports
      run: |
        python -c "
        try:
            import flask
            from microservices.services import bookings, movies, showtimes, user
            from microservices.database import db_connection
            print('✓ All modules import successfully')
        except ImportError as e:
            print(f'✗ Import failed: {str(e)}')
            exit(1)
        "

  build-and-push:
    needs: setup-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [booking-service, movie-service, showtime-service, user-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    
    - name: Build and push
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }} \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest \
          --build-arg SERVICE_MODULE=${{ matrix.service }} \
          .
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }}
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Minikube
      run: |
        # Install Minikube
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
        # Install kubectl
        sudo apt-get update
        sudo apt-get install -y kubectl
        
        # Start cluster
        minikube start --driver=docker
        minikube update-context
        
        # Verify
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy Resources
      run: |
          # Create namespace
          kubectl create namespace movie-booking --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply configurations
          kubectl apply -f k8s_specification/configmaps/ -n movie-booking
          kubectl apply -f k8s_specification/secrets/ -n movie-booking
          kubectl apply -f k8s_specification/persistentvolume/ -n movie-booking
          
          # Apply all deployments first
          kubectl apply -f k8s_specification/deployments/ -n movie-booking
          
          # Then update images
          for service in booking-service movie-service showtime-service user-service; do
            kubectl set image deployment/$service \
              $service=${{ env.DOCKER_REGISTRY }}/22i1140/$service:${{ env.APP_VERSION }} \
              -n movie-booking
          done
          
          # Apply services and ingress
          kubectl apply -f k8s_specification/services/ -n movie-booking
          kubectl apply -f k8s_specification/ingress/ -n movie-booking
          
          # Verify deployments
          kubectl rollout status -n movie-booking deployment/movie-service --timeout=500s
          kubectl rollout status -n movie-booking deployment/booking-service --timeout=500s
          kubectl rollout status -n movie-booking deployment/showtime-service --timeout=500s
          kubectl rollout status -n movie-booking deployment/user-service --timeout=500s
          
          # Get cluster info
          echo "Cluster details:"
          kubectl get all -n movie-booking
          minikube service list -n movie-booking