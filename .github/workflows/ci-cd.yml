name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  K8S_NAMESPACE: microservices
  APP_VERSION: ${{ github.sha }}

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
        
    - name: Verify installation
      run: |
        pip show Flask mysqlclient requests python-dotenv || exit 1
        echo "✓ All dependencies installed"

    - name: Test imports
      run: |
        python -c "
        try:
            import flask
            from microservices.services import bookings, movies, showtimes, user
            from microservices.database import db_connection
            print('✓ All modules import successfully')
        except ImportError as e:
            print(f'✗ Import failed: {str(e)}')
            exit(1)
        "

  build-and-push:
    needs: setup-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [booking-service, movie-service, showtime-service, user-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }} \
          -t ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest \
          --build-arg SERVICE_MODULE=${{ matrix.service }} \
          .
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:${{ env.APP_VERSION }}
        docker push ${{ env.DOCKER_REGISTRY }}/22i1140/${{ matrix.service }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: azure/setup-kubectl@v3
    
    - name: Configure Kubernetes
      run: |
        # Write config file with proper permissions
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        chmod 600 kubeconfig.yaml
        
        # Validate config structure
        if ! kubectl config view --kubeconfig=kubeconfig.yaml >/dev/null 2>&1; then
          echo "::error::Invalid kubeconfig format!"
          echo "Config file content:"
          cat kubeconfig.yaml
          exit 1
        fi
        
        export KUBECONFIG=kubeconfig.yaml
        
        # Verify cluster access
        if ! kubectl cluster-info >/dev/null 2>&1; then
          echo "::error::Failed to connect to cluster"
          kubectl config view
          exit 1
        fi
        
        echo "✓ Successfully configured Kubernetes access"

    - name: Deploy Resources
      run: |
        # Create namespace if not exists
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply configuration in order
        declare -a manifests=(
          "configmaps"
          "secrets"
          "persistentvolume"
          "deployments"
          "services"
          "ingress"
        )
        
        for manifest in "${manifests[@]}"; do
          echo "Applying $manifest..."
          kubectl apply --validate=false -f k8s_specification/$manifest/ -n ${{ env.K8S_NAMESPACE }} || true
        done
        
        # Update images for deployments
        declare -a services=(
          "booking-service"
          "movie-service"
          "showtime-service"
          "user-service"
        )
        
        for service in "${services[@]}"; do
          echo "Updating $service image..."
          kubectl set image deployment/$service \
            $service=${{ env.DOCKER_REGISTRY }}/22i1140/$service:${{ env.APP_VERSION }} \
            -n ${{ env.K8S_NAMESPACE }} || true
        done
        
        # Verify deployments
        for service in "${services[@]}"; do
          echo "Verifying rollout for $service..."
          kubectl rollout status deployment/$service \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=300s || true
        done
        
        echo "✓ All resources deployed successfully"